"""
Модуль filter_util предоставляет утилиты для фильтрации и преобразования текста.

Этот модуль содержит класс Filters, который включает в себя статические методы
для различных операций с текстом, таких как преобразование регистра и
конвертация транслитерации в кириллицу.
"""

class Filters:
    """
    Класс Filters предоставляет набор статических методов для обработки текста.

    Методы:
        to_lower: Преобразует строку в нижний регистр.
        to_upper: Преобразует строку в верхний регистр.
        convert_to_ru: Конвертирует транслитерированный текст в кириллицу.
    """

    @staticmethod
    def to_lower(_s: str) -> str:
        """
        Преобразует входную строку в нижний регистр.

        Args:
            _s (str): Входная строка.

        Returns:
            str: Строка в нижнем регистре.
        """
        return _s.lower()

    @staticmethod
    def to_upper(_s: str) -> str:
        """
        Преобразует входную строку в верхний регистр.

        Args:
            _s (str): Входная строка.

        Returns:
            str: Строка в верхнем регистре.
        """
        return _s.upper()

    @staticmethod
    def convert_to_ru(_s: str, abc: any) -> str:
        """
        Конвертирует транслитерированный текст в кириллицу.

        Метод использует предоставленный словарь соответствий (abc) для замены
        транслитерированных символов на кириллические.

        Args:
            _s (str): Входная строка для конвертации.
            abc (any): Словарь или список словарей с соответствиями символов.

        Returns:
            str: Строка, сконвертированная в кириллицу.
        """
        _t = ""
        words = _s.split()
        for _i in words:
            for _l in _i:
                found = False
                for l_dict in abc:
                    for ru_l, translit in l_dict.items():
                        if _l in translit:
                            _t += ru_l
                            found = True
                            break
                    if found:
                        break
                if not found:
                    _t += _l
            _t += " "
        return _t.strip()
